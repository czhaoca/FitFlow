version: '3.8'

# Production deployment configuration for OCI ARM VM
# This configuration is optimized for OCI Free Tier resources

services:
  # API Gateway with SSL termination
  gateway:
    image: kong:3.5-alpine
    container_name: fitflow-gateway
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_SSL_CERT: /certs/fitflow.crt
      KONG_SSL_CERT_KEY: /certs/fitflow.key
    ports:
      - "80:8000"
      - "443:8443"
    volumes:
      - ./config/kong.yml:/kong/kong.yml:ro
      - ./certs:/certs:ro
    networks:
      - fitflow-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # PostgreSQL Database (consider using OCI Autonomous Database in production)
  postgres:
    image: postgres:16-alpine
    container_name: fitflow-postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./backups:/backups
    networks:
      - fitflow-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: fitflow-redis
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis-data:/data
    networks:
      - fitflow-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "redis-cli", "--auth", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Auth Service
  auth-service:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
      target: production
    container_name: fitflow-auth
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?ssl=true
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fitflow-network
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # User Service
  user-service:
    build:
      context: ./services/user
      dockerfile: Dockerfile
      target: production
    container_name: fitflow-user
    environment:
      NODE_ENV: production
      PORT: 3002
      DB_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?ssl=true
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fitflow-network
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Scheduling Service
  scheduling-service:
    build:
      context: ./services/scheduling
      dockerfile: Dockerfile
      target: production
    container_name: fitflow-scheduling
    environment:
      NODE_ENV: production
      PORT: 3003
      DB_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?ssl=true
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fitflow-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Session Service
  session-service:
    build:
      context: ./services/session
      dockerfile: Dockerfile
      target: production
    container_name: fitflow-session
    environment:
      NODE_ENV: production
      PORT: 3004
      DB_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?ssl=true
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      AI_API_KEY: ${AI_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fitflow-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Financial Service
  financial-service:
    build:
      context: ./services/financial
      dockerfile: Dockerfile
      target: production
    container_name: fitflow-financial
    environment:
      NODE_ENV: production
      PORT: 3005
      DB_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?ssl=true
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fitflow-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Studio Service
  studio-service:
    build:
      context: ./services/studio
      dockerfile: Dockerfile
      target: production
    container_name: fitflow-studio
    environment:
      NODE_ENV: production
      PORT: 3006
      DB_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?ssl=true
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fitflow-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Notification Service
  notification-service:
    build:
      context: ./services/notification
      dockerfile: Dockerfile
      target: production
    container_name: fitflow-notification
    environment:
      NODE_ENV: production
      PORT: 3007
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      SMS_API_KEY: ${SMS_API_KEY}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - fitflow-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  # Analytics Service
  analytics-service:
    build:
      context: ./services/analytics
      dockerfile: Dockerfile
      target: production
    container_name: fitflow-analytics
    environment:
      NODE_ENV: production
      PORT: 3008
      DB_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?ssl=true
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fitflow-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Storage Service (OCI Object Storage)
  storage-service:
    build:
      context: ./services/storage
      dockerfile: Dockerfile
      target: production
    container_name: fitflow-storage
    environment:
      NODE_ENV: production
      PORT: 3009
      S3_ENDPOINT: ${OCI_S3_ENDPOINT}
      S3_ACCESS_KEY: ${OCI_ACCESS_KEY}
      S3_SECRET_KEY: ${OCI_SECRET_KEY}
      S3_BUCKET: ${S3_BUCKET}
      S3_REGION: ${OCI_REGION}
    networks:
      - fitflow-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  # Frontend Web App (served by nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: fitflow-frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://api.fitflow.ca
    networks:
      - fitflow-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Nginx for static file serving and SSL
  nginx:
    image: nginx:alpine
    container_name: fitflow-nginx
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - gateway
    networks:
      - fitflow-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  # Backup service (runs periodically)
  backup:
    image: postgres:16-alpine
    container_name: fitflow-backup
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: /bin/sh -c "chmod +x /backup.sh && crond -f -l 2"
    networks:
      - fitflow-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M

networks:
  fitflow-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local